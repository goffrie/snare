#! /usr/bin/env python3.7

# Copyright (c) 2019 King's College London, created by the Software Development
# Team <http://soft-dev.org/>
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0>, or the MIT license <LICENSE-MIT
# or http://opensource.org/licenses/MIT>, or the UPL-1.0 license
# <http://opensource.org/licenses/UPL> at your option. This file may not be
# copied, modified, or distributed except according to those terms.

import getopt, hashlib, hmac, json, os, subprocess, sys, tempfile
from http.server import ThreadingHTTPServer, BaseHTTPRequestHandler
from urllib.parse import unquote

class HookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        data = self.rfile.read(int(self.headers["Content-Length"]))
        if not self._check_secret(data):
            self.send_response(401)
            return

        data_str = unquote(data.decode("utf-8")[8:])
        pl = json.loads(data_str)
        owner = pl["repository"]["owner"]["login"].lower()
        repo = pl["repository"]["name"].lower()

        path = os.path.join(repo_scripts_dir, owner, repo)
        if os.path.exists(path):
            with tempfile.NamedTemporaryFile() as jsonf:
                jsonf.write(data_str.encode())
                event = self.headers["X-GitHub-Event"]
                rtn = subprocess.run([path, event, jsonf.name])
            if rtn.returncode == 0:
                self.send_response(200)
            else:
                self.send_response(500)
        else:
            self.send_response(501)

    def _check_secret(self, data):
        if "X-Hub-Signature" not in self.headers:
            return false
        sha, sig = self.headers["X-Hub-Signature"].split("=")
        mac = hmac.new(secret.encode(), msg=data, digestmod=hashlib.sha1)
        return hmac.compare_digest(mac.hexdigest(), sig)

def usage(code):
    sys.stderr.write("Usage: snare -p <port> -r <repo-programs-dir> -s <secrets-path>\n")
    sys.exit(code)

if __name__ == '__main__':
    port = None
    repo_scripts_dir = None
    secrets_path = None
    opts, args = getopt.getopt(sys.argv[1 : ], "hp:r:s:")
    for opt in opts:
        if opt[0] == "-h":
            usage(0)
        elif opt[0] == "-p":
            port = int(opt[1])
        elif opt[0] == "-r":
            repo_scripts_dir = os.path.abspath(opt[1])
        elif opt[0] == "-s":
            secrets_path = opt[1]
    if port is None or repo_scripts_dir is None or secrets_path is None or len(args) > 0:
        usage(1)

    with open(secrets_path) as f:
        secret = f.read().strip()

    while True:
        try:
            server = ThreadingHTTPServer(('', port), HookHandler)
            server.serve_forever()
        except Exception:
            pass
